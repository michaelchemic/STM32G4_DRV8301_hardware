C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN oled.obj
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE SRC\oled.c BROWSE INCDIR(.\SRC) DEBUG OBJECTEXTEND PRINT(.\oled.lst) TAB
                    -S(2) OBJECT(oled.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"    
   3          //OLED的显存
   4          //存放格式如下.
   5          //[0]0 1 2 3 ... 127  
   6          //[1]0 1 2 3 ... 127  
   7          //[2]0 1 2 3 ... 127  
   8          //[3]0 1 2 3 ... 127  
   9          //[4]0 1 2 3 ... 127  
  10          //[5]0 1 2 3 ... 127  
  11          //[6]0 1 2 3 ... 127  
  12          //[7]0 1 2 3 ... 127         
  13          void delay_ms(unsigned int ms)
  14          {                         
  15   1        unsigned int a;
  16   1        while(ms)
  17   1        {
  18   2          a=1800;
  19   2          while(a--);
  20   2          ms--;
  21   2        }
  22   1        return;
  23   1      }
  24          
  25          //反显函数
  26          void OLED_ColorTurn(u8 i)
  27          {
  28   1        if(i==0)
  29   1          {
  30   2            OLED_WR_Byte(0xA6,OLED_CMD);//正常显示
  31   2          }
  32   1        if(i==1)
  33   1          {
  34   2            OLED_WR_Byte(0xA7,OLED_CMD);//反色显示
  35   2          }
  36   1      }
  37          
  38          
  39          //延时
  40          void IIC_delay(void)
  41          {
  42   1        u8 t=1;
  43   1        while(t--);
  44   1      }
  45          
  46          //起始信号
  47          void I2C_Start(void)
  48          {
  49   1        OLED_SDA_Set();
  50   1        OLED_SCL_Set();
  51   1        IIC_delay();
  52   1        OLED_SDA_Clr();
  53   1        IIC_delay();
  54   1        OLED_SCL_Clr();
C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 2   

  55   1         
  56   1      }
  57          
  58          //结束信号
  59          void I2C_Stop(void)
  60          {
  61   1        OLED_SDA_Clr();
  62   1        OLED_SCL_Set();
  63   1        IIC_delay();
  64   1        OLED_SDA_Set();
  65   1      }
  66          
  67          //等待信号响应
  68          void I2C_WaitAck(void) //测数据信号的电平
  69          {
  70   1        OLED_SDA_Set();
  71   1        IIC_delay();
  72   1        OLED_SCL_Set();
  73   1        IIC_delay();
  74   1        OLED_SCL_Clr();
  75   1        IIC_delay();
  76   1      }
  77          
  78          //写入一个字节
  79          void Send_Byte(u8 dat)
  80          {
  81   1        u8 i;
  82   1        for(i=0;i<8;i++)
  83   1        {
  84   2          OLED_SCL_Clr();//将时钟信号设置为低电平
  85   2          if(dat&0x80)//将dat的8位从最高位依次写入
  86   2          {
  87   3            OLED_SDA_Set();
  88   3          }
  89   2          else
  90   2          {
  91   3            OLED_SDA_Clr();
  92   3          }
  93   2          IIC_delay();
  94   2          OLED_SCL_Set();
  95   2          IIC_delay();
  96   2          OLED_SCL_Clr();
  97   2          dat<<=1;
  98   2        }
  99   1      }
 100          
 101          //发送一个字节
 102          //向SSD1306写入一个字节。
 103          //mode:数据/命令标志 0,表示命令;1,表示数据;
 104          void OLED_WR_Byte(u8 dat,u8 mode)
 105          {
 106   1        I2C_Start();
 107   1        Send_Byte(0x78);
 108   1        I2C_WaitAck();
 109   1        if(mode){Send_Byte(0x40);}
 110   1        else{Send_Byte(0x00);}
 111   1        I2C_WaitAck();
 112   1        Send_Byte(dat);
 113   1        I2C_WaitAck();
 114   1        I2C_Stop();
 115   1      }
 116          
C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 3   

 117          //坐标设置
 118          
 119          void OLED_Set_Pos(u8 x, u8 y) 
 120          { 
 121   1        OLED_WR_Byte(0xb0+y,OLED_CMD);
 122   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 123   1        OLED_WR_Byte((x&0x0f),OLED_CMD);
 124   1      }       
 125          //开启OLED显示    
 126          void OLED_Display_On(void)
 127          {
 128   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 129   1        OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 130   1        OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 131   1      }
 132          //关闭OLED显示     
 133          void OLED_Display_Off(void)
 134          {
 135   1        OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 136   1        OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 137   1        OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 138   1      }            
 139          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!    
 140          void OLED_Clear(void)  
 141          {  
 142   1        u8 i,n;       
 143   1        for(i=0;i<oled_y;i++)  
 144   1        {  
 145   2          OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 146   2          OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 147   2          OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 148   2          for(n=0;n<oled_x;n++)OLED_WR_Byte(0,OLED_DATA); 
 149   2        } //更新显示
 150   1      }
 151          
 152          //在指定位置显示一个字符,包括部分字符
 153          //x:0~127
 154          //y:0~63         
 155          //sizey:选择字体 6x8  8x16
 156          void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 sizey)
 157          {       
 158   1        u8 c=0,sizex=sizey/2;
 159   1        u16 i=0,size1;
 160   1        if(sizey==8)size1=6;
 161   1        else size1=(sizey/8+((sizey%8)?1:0))*(sizey/2);
 162   1        c=chr-' ';//得到偏移后的值
 163   1        OLED_Set_Pos(x,y);
 164   1        for(i=0;i<size1;i++)
 165   1        {
 166   2          if(i%sizex==0&&sizey!=8) OLED_Set_Pos(x,y++);
 167   2          if(sizey==8) OLED_WR_Byte(asc2_0806[c][i],OLED_DATA);//6X8字号
 168   2          else if(sizey==16) OLED_WR_Byte(asc2_1608[c][i],OLED_DATA);//8x16字号
 169   2      //    else if(sizey==xx) OLED_WR_Byte(asc2_xxxx[c][i],OLED_DATA);//用户添加字号
 170   2          else return;
 171   2        }
 172   1      }
 173          //m^n函数
 174          u32 oled_pow(u8 m,u8 n)
 175          {
 176   1        u32 result=1;  
 177   1        while(n--)result*=m;    
 178   1        return result;
C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 4   

 179   1      }         
 180          //显示数字
 181          //x,y :起点坐标
 182          //num:要显示的数字
 183          //len :数字的位数
 184          //sizey:字体大小      
 185          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 sizey)
 186          {           
 187   1        u8 t,temp,m=0;
 188   1        u8 enshow=0;
 189   1        if(sizey==8)m=2;
 190   1        for(t=0;t<len;t++)
 191   1        {
 192   2          temp=(num/oled_pow(10,len-t-1))%10;
 193   2          if(enshow==0&&t<(len-1))
 194   2          {
 195   3            if(temp==0)
 196   3            {
 197   4              OLED_ShowChar(x+(sizey/2+m)*t,y,' ',sizey);
 198   4              continue;
 199   4            }else enshow=1;
 200   3          }
 201   2          OLED_ShowChar(x+(sizey/2+m)*t,y,temp+'0',sizey);
 202   2        }
 203   1      }
 204          //显示一个字符号串
 205          void OLED_ShowString(u8 x,u8 y,u8 *chr,u8 sizey)
 206          {
 207   1        u8 j=0;
 208   1        while (chr[j]!='\0')
 209   1        {   
 210   2          OLED_ShowChar(x,y,chr[j++],sizey);
 211   2          if(sizey==8)x+=6;
 212   2          else x+=sizey/2;
 213   2        }
 214   1      }
 215          //显示汉字
 216          void OLED_ShowChinese(u8 x,u8 y,u8 no,u8 sizey)
 217          {
 218   1        u16 i,size1=(sizey/8+((sizey%8)?1:0))*sizey;
 219   1        for(i=0;i<size1;i++)
 220   1        {
 221   2          if(i%sizey==0) OLED_Set_Pos(x,y++);
 222   2          if(sizey==16) OLED_WR_Byte(Hzk[no][i],OLED_DATA);//16x16字号
 223   2      //    else if(sizey==xx) OLED_WR_Byte(xxx[c][i],OLED_DATA);//用户添加字号
 224   2          else return;
 225   2        }       
 226   1      }
 227          
 228          
 229          //显示图片
 230          //x,y显示坐标
 231          //sizex,sizey,图片长宽
 232          //BMP：要显示的图片
 233          void OLED_DrawBMP(u8 x,u8 y,u8 sizex, u8 sizey,u8 BMP[])
 234          {   
 235   1        u16 j=0;
 236   1        u8 i,m;
 237   1        sizey=sizey/8+((sizey%8)?1:0);
 238   1        for(i=0;i<sizey;i++)
 239   1        {
 240   2          OLED_Set_Pos(x,i+y);
C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 5   

 241   2          for(m=0;m<sizex;m++)
 242   2          {      
 243   3            OLED_WR_Byte(BMP[j++],OLED_DATA);       
 244   3          }
 245   2        }
 246   1      } 
 247          
 248          
 249          
 250          //初始化            
 251          void OLED_Init(void)
 252          {
 253   1        OLED_RES_Clr();
 254   1        delay_ms(10);
 255   1        OLED_RES_Set();
 256   1        
 257   1        OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 258   1        
 259   1        OLED_WR_Byte(0x00,OLED_CMD);    /*set lower column address*/       
 260   1        OLED_WR_Byte(0x10,OLED_CMD);    /*set higher column address*/
 261   1      
 262   1        OLED_WR_Byte(0xB0,OLED_CMD);    /*set page address*/
 263   1      
 264   1        OLED_WR_Byte(0x81,OLED_CMD);    /*contract control*/
 265   1        OLED_WR_Byte(0x5f,OLED_CMD);    /*128*/
 266   1        
 267   1        if(USE_HORIZONTAL==0)
 268   1        {
 269   2          OLED_WR_Byte(0x20,OLED_CMD);    /* Set Memory addressing mode (0x20/0x21) */
 270   2          OLED_WR_Byte(0x09,OLED_CMD);     /* 0x09 */
 271   2      
 272   2          OLED_WR_Byte(0xA1,OLED_CMD);    /*set segment remap  0XA1 */
 273   2          OLED_WR_Byte(0xC8,OLED_CMD);    /*Com scan direction   0Xc8  */
 274   2        }
 275   1        else if(USE_HORIZONTAL==90)
 276   1        {
 277   2          OLED_WR_Byte(0x20,OLED_CMD);    /* Set Memory addressing mode (0x20/0x21) */
 278   2          OLED_WR_Byte(0x02,OLED_CMD);     /* 0x02 */
 279   2      
 280   2          OLED_WR_Byte(0xA1,OLED_CMD);    /*set segment remap  0XA1 */
 281   2          OLED_WR_Byte(0xC0,OLED_CMD);    /*Com scan direction   0Xc0  */
 282   2        }
 283   1        else if(USE_HORIZONTAL==180)
 284   1        {
 285   2          OLED_WR_Byte(0x20,OLED_CMD);    /* Set Memory addressing mode (0x20/0x21) */
 286   2          OLED_WR_Byte(0x09,OLED_CMD);     /* 0x09 */
 287   2      
 288   2          OLED_WR_Byte(0xA0,OLED_CMD);    /*set segment remap  0XA0 */
 289   2          OLED_WR_Byte(0xC0,OLED_CMD);    /*Com scan direction   0Xc0  */
 290   2        }
 291   1        else if(USE_HORIZONTAL==270)
 292   1        {
 293   2          OLED_WR_Byte(0x20,OLED_CMD);    /* Set Memory addressing mode (0x20/0x21) */
 294   2          OLED_WR_Byte(0x02,OLED_CMD);     /* 0x02 */
 295   2      
 296   2          OLED_WR_Byte(0xA0,OLED_CMD);    /*set segment remap  0XA0 */
 297   2          OLED_WR_Byte(0xC8,OLED_CMD);    /*Com scan direction   0Xc8  */
 298   2        }
 299   1        
 300   1        OLED_WR_Byte(0xA4,OLED_CMD);    /*Disable Entire Display On (0xA4/0xA5)*/ 
 301   1      
 302   1        OLED_WR_Byte(0xA6,OLED_CMD);    /*normal / reverse*/
C51 COMPILER V9.52.0.0   OLED                                                              10/24/2020 12:53:30 PAGE 6   

 303   1      
 304   1        OLED_WR_Byte(0xA8,OLED_CMD);    /*multiplex ratio*/
 305   1        OLED_WR_Byte(0x3F,OLED_CMD);    /*duty = 1/64*/
 306   1      
 307   1        OLED_WR_Byte(0xD3,OLED_CMD);    /*set display offset*/
 308   1        OLED_WR_Byte(0x00,OLED_CMD);    /*   0x20   */
 309   1      
 310   1        OLED_WR_Byte(0xD5,OLED_CMD);    /*set osc division*/
 311   1        OLED_WR_Byte(0x80,OLED_CMD);    
 312   1      
 313   1        OLED_WR_Byte(0xD9,OLED_CMD);    /*set pre-charge period*/
 314   1        OLED_WR_Byte(0x22,OLED_CMD);
 315   1      
 316   1        OLED_WR_Byte(0xDA,OLED_CMD);    /* Set SEG Pins Hardware Configuration */
 317   1        OLED_WR_Byte(0x10,OLED_CMD);
 318   1      
 319   1        OLED_WR_Byte(0xdb,OLED_CMD);    /*set vcomh*/
 320   1        OLED_WR_Byte(0x30,OLED_CMD);
 321   1      
 322   1        OLED_WR_Byte(0x8d,OLED_CMD);    /*set charge pump enable*/
 323   1        OLED_WR_Byte(0x72,OLED_CMD);    /* 0x12:7.5V; 0x52:8V;  0x72:9V;  0x92:10V */
 324   1        OLED_Clear();
 325   1        OLED_WR_Byte(0xAF,OLED_CMD);
 326   1      }
 327          
 328          
 329          
 330          
*** WARNING C294 IN LINE 277 OF SRC\oled.c: unreachable code
*** WARNING C294 IN LINE 285 OF SRC\oled.c: unreachable code
*** WARNING C294 IN LINE 293 OF SRC\oled.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1156    ----
   CONSTANT SIZE    =   2296    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      49
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
